package dev.flutter.nfc;// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NfcResult {
    private @Nullable String cardNumber;
    public @Nullable String getCardNumber() { return cardNumber; }
    public void setCardNumber(@Nullable String setterArg) {
      this.cardNumber = setterArg;
    }

    private @Nullable Date expiryDate;
    public @Nullable Date getExpiryDate() { return expiryDate; }
    public void setExpiryDate(@Nullable Date setterArg) {
      this.expiryDate = setterArg;
    }

    private @Nullable String aid;
    public @Nullable String getAid() { return aid; }
    public void setAid(@Nullable String setterArg) {
      this.aid = setterArg;
    }

    private @Nullable String cardType;
    public @Nullable String getCardType() { return cardType; }
    public void setCardType(@Nullable String setterArg) {
      this.cardType = setterArg;
    }

    public static final class Builder {
      private @Nullable String cardNumber;
      public @NonNull Builder setCardNumber(@Nullable String setterArg) {
        this.cardNumber = setterArg;
        return this;
      }
      private @Nullable Date expiryDate;
      public @NonNull Builder setExpiryDate(@Nullable Date setterArg) {
        this.expiryDate = setterArg;
        return this;
      }
      private @Nullable String aid;
      public @NonNull Builder setAid(@Nullable String setterArg) {
        this.aid = setterArg;
        return this;
      }
      private @Nullable String cardType;
      public @NonNull Builder setCardType(@Nullable String setterArg) {
        this.cardType = setterArg;
        return this;
      }
      public @NonNull NfcResult build() {
        NfcResult pigeonReturn = new NfcResult();
        pigeonReturn.setCardNumber(cardNumber);
        pigeonReturn.setExpiryDate(expiryDate);
        pigeonReturn.setAid(aid);
        pigeonReturn.setCardType(cardType);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("cardNumber", cardNumber);
      toMapResult.put("expiryDate", (expiryDate == null) ? null : expiryDate.toMap());
      toMapResult.put("aid", aid);
      toMapResult.put("cardType", cardType);
      return toMapResult;
    }
    static @NonNull NfcResult fromMap(@NonNull Map<String, Object> map) {
      NfcResult pigeonResult = new NfcResult();
      Object cardNumber = map.get("cardNumber");
      pigeonResult.setCardNumber((String)cardNumber);
      Object expiryDate = map.get("expiryDate");
      pigeonResult.setExpiryDate((expiryDate == null) ? null : Date.fromMap((Map)expiryDate));
      Object aid = map.get("aid");
      pigeonResult.setAid((String)aid);
      Object cardType = map.get("cardType");
      pigeonResult.setCardType((String)cardType);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Date {
    private @Nullable String month;
    public @Nullable String getMonth() { return month; }
    public void setMonth(@Nullable String setterArg) {
      this.month = setterArg;
    }

    private @Nullable String year;
    public @Nullable String getYear() { return year; }
    public void setYear(@Nullable String setterArg) {
      this.year = setterArg;
    }

    public static final class Builder {
      private @Nullable String month;
      public @NonNull Builder setMonth(@Nullable String setterArg) {
        this.month = setterArg;
        return this;
      }
      private @Nullable String year;
      public @NonNull Builder setYear(@Nullable String setterArg) {
        this.year = setterArg;
        return this;
      }
      public @NonNull Date build() {
        Date pigeonReturn = new Date();
        pigeonReturn.setMonth(month);
        pigeonReturn.setYear(year);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("month", month);
      toMapResult.put("year", year);
      return toMapResult;
    }
    static @NonNull Date fromMap(@NonNull Map<String, Object> map) {
      Date pigeonResult = new Date();
      Object month = map.get("month");
      pigeonResult.setMonth((String)month);
      Object year = map.get("year");
      pigeonResult.setYear((String)year);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class NfcApiCodec extends StandardMessageCodec {
    public static final NfcApiCodec INSTANCE = new NfcApiCodec();
    private NfcApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Date.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NfcResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Date) {
        stream.write(128);
        writeValue(stream, ((Date) value).toMap());
      } else 
      if (value instanceof NfcResult) {
        stream.write(129);
        writeValue(stream, ((NfcResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NfcApi {
    void scanNfcTag(Result<NfcResult> result);
    void stopScan(Result<Void> result);

    /** The codec used by NfcApi. */
    static MessageCodec<Object> getCodec() {
      return NfcApiCodec.INSTANCE;
    }

    /** Sets up an instance of `NfcApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NfcApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NfcApi.scanNfcTag", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NfcResult> resultCallback = new Result<NfcResult>() {
                public void success(NfcResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.scanNfcTag(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NfcApi.stopScan", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.stopScan(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
